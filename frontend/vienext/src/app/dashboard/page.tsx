"use client";

import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useAppStore } from "@/contexts/store";
import { X } from "lucide-react";

import { PostCard } from "@/components/dashboard/post-card";
import { CreatePostModal } from "@/components/dashboard/create-post-modal";
import { ChatWindow } from "@/components/dashboard/chat-window";
import { CommentSection } from "@/components/dashboard/comment-section";
import { PostDetailModal } from "@/components/dashboard/post-detail-modal";
import { NotificationCenter } from "@/components/dashboard/notification-center";
import { TrendingTopics } from "@/components/dashboard/trending-topics";
import { SuggestedUsers } from "@/components/dashboard/suggested-users";
import { OnlineFriends } from "@/components/dashboard/online-friends";
import { SearchBar } from "@/components/dashboard/search-bar";

// Mock data for posts
const mockPosts = [
  {
    id: 1,
    user: {
      name: "Minh Anh",
      username: "minhanh",
      avatar: "/api/placeholder?height=40&width=40&text=MA",
      verified: true,
    },
    content:
      "V·ª´a ho√†n th√†nh d·ª± √°n UI/UX m·ªõi! R·∫•t h√†o h·ª©ng ƒë·ªÉ chia s·∫ª v·ªõi m·ªçi ng∆∞·ªùi üéâ #UIUXDesign #Design",
    image: "/api/placeholder?height=400&width=600&text=UI/UX+Project",
    time: "10 ph√∫t tr∆∞·ªõc",
    likes: 24,
    comments: [
      {
        id: 101,
        user: {
          name: "Ho√†ng Nam",
          username: "hoangnam",
          avatar: "/api/placeholder?height=40&width=40&text=HN",
          verified: false,
        },
        content: "Tuy·ªát v·ªùi qu√°! M√¨nh r·∫•t th√≠ch thi·∫øt k·∫ø n√†y.",
        time: "8 ph√∫t tr∆∞·ªõc",
        likes: 3,
      },
      {
        id: 102,
        user: {
          name: "Thu H√†",
          username: "thuha",
          avatar: "/api/placeholder?height=40&width=40&text=TH",
          verified: true,
        },
        content: "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ quy tr√¨nh l√†m vi·ªác kh√¥ng?",
        time: "5 ph√∫t tr∆∞·ªõc",
        likes: 1,
      },
    ],
    shares: 2,
    liked: false,
    saved: false,
  },
  {
    id: 2,
    user: {
      name: "Ho√†ng Nam",
      username: "hoangnam",
      avatar: "/api/placeholder?height=40&width=40&text=HN",
      verified: false,
    },
    content:
      "H√¥m nay m√¨nh v·ª´a h·ªçc xong kh√≥a React Advanced. C√≥ ai ƒëang l√†m vi·ªác v·ªõi React kh√¥ng? M√¨nh c√≥ v√†i c√¢u h·ªèi mu·ªën th·∫£o lu·∫≠n. #ReactJS #WebDevelopment",
    image: "",
    time: "30 ph√∫t tr∆∞·ªõc",
    likes: 15,
    comments: [
      {
        id: 201,
        user: {
          name: "Quang Minh",
          username: "quangminh",
          avatar: "/api/placeholder?height=40&width=40&text=QM",
          verified: true,
        },
        content: "M√¨nh ƒëang l√†m React ƒë∆∞·ª£c 2 nƒÉm r·ªìi, b·∫°n c·∫ßn h·ªèi g√¨?",
        time: "25 ph√∫t tr∆∞·ªõc",
        likes: 2,
      },
    ],
    shares: 1,
    liked: true,
    saved: false,
  },
  {
    id: 3,
    user: {
      name: "Thu H√†",
      username: "thuha",
      avatar: "/api/placeholder?height=40&width=40&text=TH",
      verified: true,
    },
    content:
      "Chuy·∫øn du l·ªãch ƒê√† N·∫µng tu·∫ßn tr∆∞·ªõc. C·∫£nh ƒë·∫πp qu√° m·ªçi ng∆∞·ªùi ∆°i! #TravelVietnam #DaNang",
    image: "/api/placeholder?height=400&width=600&text=Da+Nang+Trip",
    time: "2 gi·ªù tr∆∞·ªõc",
    likes: 89,
    comments: [
      {
        id: 301,
        user: {
          name: "Minh Anh",
          username: "minhanh",
          avatar: "/api/placeholder?height=40&width=40&text=MA",
          verified: true,
        },
        content: "ƒê·∫πp qu√°! L·∫ßn sau m√¨nh c≈©ng mu·ªën ƒëi.",
        time: "1 gi·ªù tr∆∞·ªõc",
        likes: 5,
      },
      {
        id: 302,
        user: {
          name: "Ho√†ng Nam",
          username: "hoangnam",
          avatar: "/api/placeholder?height=40&width=40&text=HN",
          verified: false,
        },
        content: "B·∫°n ƒëi m·∫•y ng√†y v·∫≠y? Chi ph√≠ kho·∫£ng bao nhi√™u?",
        time: "45 ph√∫t tr∆∞·ªõc",
        likes: 1,
      },
      {
        id: 303,
        user: {
          name: "Quang Minh",
          username: "quangminh",
          avatar: "/api/placeholder?height=40&width=40&text=QM",
          verified: true,
        },
        content: "Nh√¨n th√≠ch th·∫≠t ƒë·∫•y! ƒê√† N·∫µng m√πa n√†y ƒë·∫πp nh·∫•t.",
        time: "30 ph√∫t tr∆∞·ªõc",
        likes: 2,
      },
    ],
    shares: 5,
    liked: false,
    saved: true,
  },
  {
    id: 4,
    user: {
      name: "Quang Minh",
      username: "quangminh",
      avatar: "/api/placeholder?height=40&width=40&text=QM",
      verified: true,
    },
    content:
      "V·ª´a ƒë·ªçc xong cu·ªën s√°ch v·ªÅ AI v√† t∆∞∆°ng lai c·ªßa c√¥ng ngh·ªá. Th·ª±c s·ª± ƒë√°ng ƒë·ªçc! Ai quan t√¢m m√¨nh c√≥ th·ªÉ chia s·∫ª t√™n s√°ch. #AITechnology #TechVietnam",
    image: "/api/placeholder?height=400&width=600&text=AI+Book",
    time: "5 gi·ªù tr∆∞·ªõc",
    likes: 45,
    comments: [
      {
        id: 401,
        user: {
          name: "Thu H√†",
          username: "thuha",
          avatar: "/api/placeholder?height=40&width=40&text=TH",
          verified: true,
        },
        content: "T√™n s√°ch l√† g√¨ v·∫≠y b·∫°n?",
        time: "4 gi·ªù tr∆∞·ªõc",
        likes: 0,
      },
      {
        id: 402,
        user: {
          name: "Ho√†ng Nam",
          username: "hoangnam",
          avatar: "/api/placeholder?height=40&width=40&text=HN",
          verified: false,
        },
        content: "M√¨nh c≈©ng ƒëang t√¨m s√°ch v·ªÅ AI, chia s·∫ª t√™n v·ªõi m√¨nh nh√©!",
        time: "3 gi·ªù tr∆∞·ªõc",
        likes: 1,
      },
    ],
    shares: 3,
    liked: false,
    saved: false,
  },
];

// Mock data for trending topics
const trendingTopics = [
  { id: 1, name: "#ReactJS", posts: 1240 },
  { id: 2, name: "#AITechnology", posts: 980 },
  { id: 3, name: "#WebDevelopment", posts: 854 },
  { id: 4, name: "#UXDesign", posts: 720 },
  { id: 5, name: "#TechVietnam", posts: 650 },
];

// Mock data for suggested users
const suggestedUsers = [
  {
    id: 1,
    name: "Lan Anh",
    username: "lananh",
    avatar: "/api/placeholder?height=40&width=40&text=LA",
    mutual: 5,
    verified: false,
  },
  {
    id: 2,
    name: "ƒê·ª©c Th·∫Øng",
    username: "ducthang",
    avatar: "/api/placeholder?height=40&width=40&text=DT",
    mutual: 3,
    verified: true,
  },
  {
    id: 3,
    name: "Mai H∆∞∆°ng",
    username: "maihuong",
    avatar: "/api/placeholder?height=40&width=40&text=MH",
    mutual: 2,
    verified: false,
  },
];

// Mock data for new messages
const newMessages = [
  {
    id: 1,
    user: {
      name: "Minh Anh",
      username: "minhanh",
      avatar: "/api/placeholder?height=40&width=40&text=MA",
      online: true,
      verified: true,
      lastActive: null,
    },
    lastMessage: "B·∫°n ƒë√£ xem d·ª± √°n m·ªõi c·ªßa m√¨nh ch∆∞a?",
    time: "2 ph√∫t tr∆∞·ªõc",
    date: "2025-05-07T10:30:00",
    unread: true,
    seen: false,
    conversation: [
      {
        id: 1001,
        sender: "minhanh",
        content: "Ch√†o b·∫°n, m√¨nh v·ª´a ho√†n th√†nh d·ª± √°n UI/UX m·ªõi",
        time: "10:15",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 1002,
        sender: "datducnguyen",
        content: "·ªí, tuy·ªát v·ªùi! D·ª± √°n g√¨ v·∫≠y?",
        time: "10:18",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 1003,
        sender: "minhanh",
        content: "M·ªôt ·ª©ng d·ª•ng qu·∫£n l√Ω c√¥ng vi·ªác. M√¨nh ƒë√£ ƒëƒÉng l√™n Behance r·ªìi",
        time: "10:25",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 1004,
        sender: "minhanh",
        content: "B·∫°n ƒë√£ xem d·ª± √°n m·ªõi c·ªßa m√¨nh ch∆∞a?",
        time: "10:30",
        date: "2025-05-07",
        seen: false,
      },
    ],
  },
  {
    id: 2,
    user: {
      name: "Ho√†ng Nam",
      username: "hoangnam",
      avatar: "/api/placeholder?height=40&width=40&text=HN",
      online: false,
      verified: false,
      lastActive: "30 ph√∫t tr∆∞·ªõc",
    },
    lastMessage: "C·∫£m ∆°n b·∫°n ƒë√£ gi√∫p m√¨nh v·ªõi v·∫•n ƒë·ªÅ React h√¥m qua!",
    time: "30 ph√∫t tr∆∞·ªõc",
    date: "2025-05-07T10:00:00",
    unread: true,
    seen: false,
    conversation: [
      {
        id: 2001,
        sender: "hoangnam",
        content: "B·∫°n ∆°i, m√¨nh ƒëang g·∫∑p v·∫•n ƒë·ªÅ v·ªõi React hooks",
        time: "09:00",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 2002,
        sender: "datducnguyen",
        content: "V·∫•n ƒë·ªÅ g√¨ v·∫≠y b·∫°n?",
        time: "09:05",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 2003,
        sender: "hoangnam",
        content: "M√¨nh kh√¥ng hi·ªÉu useEffect ch·∫°y khi n√†o",
        time: "09:10",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 2004,
        sender: "datducnguyen",
        content:
          "useEffect s·∫Ω ch·∫°y sau khi component render xong. N√≥ c√≥ th·ªÉ ch·∫°y m·ªôt l·∫ßn ho·∫∑c nhi·ªÅu l·∫ßn t√πy thu·ªôc v√†o dependency array. N·∫øu dependency array r·ªóng [], n√≥ ch·ªâ ch·∫°y m·ªôt l·∫ßn sau khi component mount. N·∫øu kh√¥ng c√≥ dependency array, n√≥ s·∫Ω ch·∫°y sau m·ªói l·∫ßn render. N·∫øu c√≥ c√°c gi√° tr·ªã trong dependency array, n√≥ s·∫Ω ch·∫°y khi c√°c gi√° tr·ªã ƒë√≥ thay ƒë·ªïi.",
        time: "09:15",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 2005,
        sender: "hoangnam",
        content: "C·∫£m ∆°n b·∫°n ƒë√£ gi√∫p m√¨nh v·ªõi v·∫•n ƒë·ªÅ React h√¥m qua!",
        time: "10:00",
        date: "2025-05-07",
        seen: false,
      },
    ],
  },
  {
    id: 3,
    user: {
      name: "Thu H√†",
      username: "thuha",
      avatar: "/api/placeholder?height=40&width=40&text=TH",
      online: true,
      verified: true,
      lastActive: null,
    },
    lastMessage: "H·∫πn g·∫∑p l·∫°i v√†o cu·ªëi tu·∫ßn nh√©!",
    time: "1 gi·ªù tr∆∞·ªõc",
    date: "2025-05-07T09:30:00",
    unread: false,
    seen: true,
    conversation: [
      {
        id: 3001,
        sender: "thuha",
        content: "Ch√†o b·∫°n, cu·ªëi tu·∫ßn n√†y b·∫°n c√≥ r·∫£nh kh√¥ng?",
        time: "08:00",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 3002,
        sender: "datducnguyen",
        content: "M√¨nh r·∫£nh v√†o chi·ªÅu th·ª© 7",
        time: "08:30",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 3003,
        sender: "thuha",
        content: "Tuy·ªát! M√¨nh c√≥ m·ªôt bu·ªïi g·∫∑p m·∫∑t nh·ªè v·ªõi nh√≥m dev",
        time: "09:15",
        date: "2025-05-07",
        seen: true,
      },
      {
        id: 3004,
        sender: "thuha",
        content: "H·∫πn g·∫∑p l·∫°i v√†o cu·ªëi tu·∫ßn nh√©!",
        time: "09:30",
        date: "2025-05-07",
        seen: true,
      },
    ],
  },
];

// Mock data for notifications
const mockNotifications = [
  {
    id: 1,
    type: "message",
    user: {
      id: 1,
      name: "Minh Anh",
      avatar: "/api/placeholder?height=40&width=40&text=MA",
      verified: true,
    },
    content: "B·∫°n ƒë√£ xem d·ª± √°n m·ªõi c·ªßa m√¨nh ch∆∞a?",
    time: "2 ph√∫t tr∆∞·ªõc",
    unread: true,
    messageId: 1,
  },
  {
    id: 2,
    type: "like",
    user: {
      id: 2,
      name: "Ho√†ng Nam",
      avatar: "/api/placeholder?height=40&width=40&text=HN",
      verified: false,
    },
    content: "",
    time: "30 ph√∫t tr∆∞·ªõc",
    unread: true,
    postId: 1,
  },
  {
    id: 3,
    type: "comment",
    user: {
      id: 3,
      name: "Thu H√†",
      avatar: "/api/placeholder?height=40&width=40&text=TH",
      verified: true,
    },
    content: "ƒê·∫πp qu√°! L·∫ßn sau m√¨nh c≈©ng mu·ªën ƒëi.",
    time: "1 gi·ªù tr∆∞·ªõc",
    unread: false,
    postId: 3,
  },
  {
    id: 4,
    type: "follow",
    user: {
      id: 4,
      name: "Quang Minh",
      avatar: "/api/placeholder?height=40&width=40&text=QM",
      verified: true,
    },
    content: "",
    time: "3 gi·ªù tr∆∞·ªõc",
    unread: true,
  },
  {
    id: 5,
    type: "mention",
    user: {
      id: 5,
      name: "Lan Anh",
      avatar: "/api/placeholder?height=40&width=40&text=LA",
      verified: false,
    },
    content: "B·∫°n nghƒ© sao v·ªÅ √Ω t∆∞·ªüng n√†y @datducnguyen?",
    time: "5 gi·ªù tr∆∞·ªõc",
    unread: false,
    postId: 2,
  },
];

// Emoji data
const emojiCategories = [
  {
    name: "Smileys",
    emojis: [
      "üòÄ",
      "üòÉ",
      "üòÑ",
      "üòÅ",
      "üòÜ",
      "üòÖ",
      "üòÇ",
      "ü§£",
      "üòä",
      "üòá",
      "üôÇ",
      "üôÉ",
      "üòâ",
      "üòå",
      "üòç",
      "ü•∞",
      "üòò",
    ],
  },
  {
    name: "Gestures",
    emojis: [
      "üëç",
      "üëé",
      "üëå",
      "‚úåÔ∏è",
      "ü§û",
      "ü§ü",
      "ü§ò",
      "ü§ô",
      "üëà",
      "üëâ",
      "üëÜ",
      "üëá",
      "üëã",
      "ü§ö",
      "üñêÔ∏è",
      "‚úã",
      "üññ",
    ],
  },
  {
    name: "Animals",
    emojis: [
      "üê∂",
      "üê±",
      "üê≠",
      "üêπ",
      "üê∞",
      "ü¶ä",
      "üêª",
      "üêº",
      "üê®",
      "üêØ",
      "ü¶Å",
      "üêÆ",
      "üê∑",
      "üê∏",
      "üêµ",
      "üêî",
      "üêß",
    ],
  },
  {
    name: "Food",
    emojis: [
      "üçè",
      "üçé",
      "üçê",
      "üçä",
      "üçã",
      "üçå",
      "üçâ",
      "üçá",
      "üçì",
      "üçà",
      "üçí",
      "üçë",
      "ü•≠",
      "üçç",
      "ü••",
      "ü•ù",
      "üçÖ",
    ],
  },
];

export default function DashboardPage() {
  const { t } = useAppStore();
  const [posts, setPosts] = useState(mockPosts);
  const [showNotificationCenter, setShowNotificationCenter] = useState(false);
  const [notifications, setNotifications] = useState(mockNotifications);
  const [activeChats, setActiveChats] = useState<number[]>([]);
  const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);
  const [selectedPost, setSelectedPost] = useState<number | null>(null);
  const [showComments, setShowComments] = useState<number | null>(null);
  const [chatMessages, setChatMessages] = useState<{ [key: number]: string }>(
    {}
  );
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [isSearching, setIsSearching] = useState(false);

  // Toggle like on a post
  const toggleLike = (postId: number) => {
    setPosts(
      posts.map((post) => {
        if (post.id === postId) {
          return {
            ...post,
            liked: !post.liked,
            likes: post.liked ? post.likes - 1 : post.likes + 1,
          };
        }
        return post;
      })
    );
  };

  // Toggle save on a post
  const toggleSave = (postId: number) => {
    setPosts(
      posts.map((post) => {
        if (post.id === postId) {
          return {
            ...post,
            saved: !post.saved,
          };
        }
        return post;
      })
    );
  };

  // Show notification after component mount and hide after 20 seconds
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowNotificationCenter(true);
    }, 2000);

    const hideTimer = setTimeout(() => {
      setShowNotificationCenter(false);
    }, 20000);

    return () => {
      clearTimeout(timer);
      clearTimeout(hideTimer);
    };
  }, []);

  // Handle new post submission
  const handlePostSubmit = (content: string, image: string) => {
    if (!content.trim()) return;

    const newPostObj = {
      id: Date.now(),
      user: {
        name: "Dat Duc Nguyen",
        username: "datducnguyen",
        avatar: "/api/placeholder?height=40&width=40&text=DDN",
        verified: true,
      },
      content: content,
      image: image,
      time: "V·ª´a xong",
      likes: 0,
      comments: [],
      shares: 0,
      liked: false,
      saved: false,
    };

    setPosts([newPostObj, ...posts]);
    setIsCreatePostOpen(false);
  };

  // Handle adding a new comment
  const handleAddComment = (postId: number, comment: string) => {
    if (!comment.trim()) return;

    const newCommentObj = {
      id: Date.now(),
      user: {
        name: "Dat Duc Nguyen",
        username: "datducnguyen",
        avatar: "/api/placeholder?height=40&width=40&text=DDN",
        verified: true,
      },
      content: comment,
      time: "V·ª´a xong",
      likes: 0,
    };

    setPosts(
      posts.map((post) => {
        if (post.id === postId) {
          return {
            ...post,
            comments: [...(post.comments || []), newCommentObj],
          };
        }
        return post;
      })
    );
  };

  // Handle chat message sending
  const handleSendMessage = (userId: number, message: string) => {
    if (!message?.trim()) return;

    // Add message to conversation
    const chatUser = newMessages.find((m) => m.id === userId);
    if (chatUser) {
      const newMessageObj = {
        id: Date.now(),
        sender: "datducnguyen",
        content: message,
        time: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
        date: new Date().toISOString().split("T")[0],
        seen: false,
      };

      chatUser.conversation.push(newMessageObj);
    }

    // Clear the input after sending
    setChatMessages({
      ...chatMessages,
      [userId]: "",
    });
  };

  // Toggle chat window
  const toggleChat = (userId: number) => {
    if (activeChats.includes(userId)) {
      // Close this chat
      setActiveChats(activeChats.filter((id) => id !== userId));
    } else {
      // Open this chat, but limit to 2 active chats
      if (activeChats.length >= 2) {
        // Remove the first chat in the array
        const newActiveChats = [...activeChats];
        newActiveChats.shift();
        setActiveChats([...newActiveChats, userId]);
      } else {
        setActiveChats([...activeChats, userId]);
      }
    }
  };

  // Get the selected post details
  const getSelectedPostDetails = () => {
    if (selectedPost === null) return null;
    return posts.find((post) => post.id === selectedPost) || null;
  };

  // Get the post for comments
  const getPostForComments = () => {
    if (showComments === null) return null;
    return posts.find((post) => post.id === showComments) || null;
  };

  // Handle search topic
  const handleSearchTopic = (topicName: string) => {
    setSearchQuery(topicName);
    setIsSearching(true);

    // M√¥ ph·ªèng t√¨m ki·∫øm - trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API
    const filteredPosts = mockPosts.filter((post) =>
      post.content.toLowerCase().includes(topicName.toLowerCase())
    );

    setSearchResults(filteredPosts);
  };

  // Handle search input
  const handleSearch = (query: string) => {
    if (!query.trim()) return;

    const filteredPosts = mockPosts.filter(
      (post) =>
        post.content.toLowerCase().includes(query.toLowerCase()) ||
        post.user.name.toLowerCase().includes(query.toLowerCase()) ||
        post.user.username.toLowerCase().includes(query.toLowerCase())
    );

    setSearchResults(filteredPosts);
    setIsSearching(true);
  };

  // Handle chat input change
  const handleChatInputChange = (chatId: number, value: string) => {
    setChatMessages({
      ...chatMessages,
      [chatId]: value,
    });
  };

  // Handle notification actions
  const handleNotificationAction = (notification: any) => {
    // X·ª≠ l√Ω c√°c h√†nh ƒë·ªông kh√°c nhau d·ª±a tr√™n lo·∫°i th√¥ng b√°o
    switch (notification.type) {
      case "message":
        // M·ªü chat v·ªõi ng∆∞·ªùi g·ª≠i tin nh·∫Øn
        toggleChat(notification.messageId);
        break;
      case "like":
      case "comment":
      case "mention":
        // M·ªü chi ti·∫øt b√†i vi·∫øt
        if (notification.postId) {
          setSelectedPost(notification.postId);
        }
        break;
      case "follow":
        // C√≥ th·ªÉ m·ªü trang profile c·ªßa ng∆∞·ªùi theo d√µi
        console.log("Xem profile c·ªßa", notification.user.name);
        break;
      default:
        break;
    }

    // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
    handleMarkNotificationAsRead(notification.id);
  };

  // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  const handleMarkNotificationAsRead = (notificationId: number) => {
    setNotifications(
      notifications.map((notification) => {
        if (notification.id === notificationId) {
          return {
            ...notification,
            unread: false,
          };
        }
        return notification;
      })
    );
  };

  // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
  const handleMarkAllNotificationsAsRead = () => {
    setNotifications(
      notifications.map((notification) => ({
        ...notification,
        unread: false,
      }))
    );
  };

  // Xem t·∫•t c·∫£ th√¥ng b√°o
  const handleViewAllNotifications = () => {
    console.log("M·ªü trang th√¥ng b√°o");
    setShowNotificationCenter(false);
    // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th√¥ng b√°o
    // V√≠ d·ª•: router.push('/notifications')
  };

  return (
    <div className="relative min-h-screen pb-20">
      {/* Main content */}
      <div className="container mx-auto grid grid-cols-1 gap-6 py-6 md:grid-cols-3 lg:grid-cols-4">
        {/* Left sidebar - only visible on larger screens */}
        <div className="hidden md:block">
          <div className="sticky top-6 space-y-6">
            {/* Search */}
            <SearchBar onSearch={handleSearch} />

            {/* Trending */}
            <TrendingTopics
              topics={trendingTopics}
              onTopicClick={handleSearchTopic}
            />

            {/* Suggested users*/}
            <SuggestedUsers users={suggestedUsers} />
          </div>
        </div>

        {/* Main feed */}
        <div className="md:col-span-2">
          {/* Create post button */}
          <Card className="mb-6">
            <CardContent className="pt-6">
              <div className="flex items-center space-x-4">
                <Avatar>
                  <AvatarImage
                    src="/api/placeholder?height=40&width=40&text=DDN"
                    alt="Profile"
                  />
                  <AvatarFallback>DDN</AvatarFallback>
                </Avatar>
                <Button
                  variant="outline"
                  className="flex-1 justify-start text-slate-500"
                  onClick={() => setIsCreatePostOpen(true)}
                >
                  {t.whatsOnYourMind}
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Feed tabs */}
          <Tabs defaultValue="forYou" className="mb-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="forYou">
                {t.forYou}
              </TabsTrigger>
              <TabsTrigger value="following">
                {t.following}
              </TabsTrigger>
            </TabsList>
          </Tabs>

          {/* Posts */}
          <div className="space-y-6">
            {isSearching && (
              <div className="mb-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">
                    {t.searchResultsFor} "
                    {searchQuery}"
                  </h3>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsSearching(false)}
                  >
                    <X className="mr-1 h-4 w-4" />
                    {t.clear}
                  </Button>
                </div>
                <p className="text-sm text-slate-500">
                  {searchResults.length}{" "}
                  {t.resultsFound}
                </p>
              </div>
            )}

            {(isSearching ? searchResults : posts).map((post) => (
              <PostCard
                key={post.id}
                post={post}
                onLike={toggleLike}
                onSave={toggleSave}
                onShowComments={(postId) => setShowComments(postId)}
                onShowPostDetail={(postId) => setSelectedPost(postId)}
              />
            ))}
          </div>
        </div>

        {/* Right sidebar */}
        <div className="hidden lg:block">
          <div className="sticky top-6 space-y-6">
            {/* online friends */}
            <OnlineFriends messages={newMessages} onChatOpen={toggleChat} />
          </div>
        </div>
      </div>

      {/* Chat windows */}
      {activeChats.map((chatId, index) => {
        const chatUser = newMessages.find((m) => m.id === chatId);
        if (!chatUser) return null;

        return (
          <ChatWindow
            key={chatId}
            chatId={chatId}
            user={chatUser.user}
            conversation={chatUser.conversation}
            position={index}
            onClose={(id) =>
              setActiveChats(activeChats.filter((chatId) => chatId !== id))
            }
            onSendMessage={handleSendMessage}
            inputValue={chatMessages[chatId] || ""}
            onInputChange={handleChatInputChange}
          />
        );
      })}

      {/* Notification Center */}
      {showNotificationCenter && (
        <NotificationCenter
          notifications={notifications}
          onClose={() => setShowNotificationCenter(false)}
          onMarkAsRead={handleMarkNotificationAsRead}
          onMarkAllAsRead={handleMarkAllNotificationsAsRead}
          onAction={handleNotificationAction}
          onViewAll={handleViewAllNotifications}
        />
      )}

      {/* Post detail modal */}
      <PostDetailModal
        selectedPost={selectedPost}
        post={getSelectedPostDetails()}
        onClose={() => setSelectedPost(null)}
        onAddComment={handleAddComment}
      />

      {/* Comments modal */}
      <CommentSection
        postId={showComments}
        post={getPostForComments()}
        onClose={() => setShowComments(null)}
        onAddComment={handleAddComment}
      />

      {/* Create post modal */}
      <CreatePostModal
        isOpen={isCreatePostOpen}
        onClose={() => setIsCreatePostOpen(false)}
        onSubmit={handlePostSubmit}
      />
    </div>
  );
}